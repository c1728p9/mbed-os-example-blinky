
struct __class;
typedef union {
    void (*_staticfunc)();
    void (*_boundfunc)(__class*);
    void (__class::*_methodfunc)();
} function_storage_t;
typedef void* object_storage_t;

{%- for Ts in arg_combinations %}
template<{{join(Ts, "typename {0!u}", ", ")}}>
struct AllArgs<{{", ".join(pad_list(format("{0!u}", Ts), "void", args_max))}}> {
    typedef AllArgs<{{", ".join(pad_list(format("{0!u}", Ts), "void", args_max))}}> Self;
    function_storage_t function;
    object_storage_t object;

    {{join(Ts, "{0!u} {0!l};", " ")}}                           

{% for F in functions %}
    AllArgs<{{F.ctor_template_specilizations.format(", ".join(format("{0!u}", Ts)))}}>({{", ".join(F.ctor_args + format("{0!u} {0!l}={0!u}()", Ts))}}): {{", ".join(format("{0!l}({0!l})", Ts))}}
    {
        {{F.create.format("this")}};
    }
{%- endfor %}

{% for F in functions %}
    template<{{", ".join(format("typename {0!u}", F.ctor_template_params))}}>
    static void copy(void *dest, void *src)
    {
        Self *self_dest = (Self*)dest;
        new (dest) Self(*(Self*)src);
        {{F.copy.format("(Self*)dest", "(Self*)src")}};
    }
{%- endfor %}

{% for F in functions %}
    template<{{", ".join(format("typename {0!u}", F.ctor_template_params))}}>
    static void call(void *data) {
        Self *s = static_cast<Self*>(data);
        {{F.call}}({{join(Ts, "{0!l}", ", ")}});
        {{F.destroy}};
        s->~Self();
    }
{%- endfor %}
};
{% endfor %}