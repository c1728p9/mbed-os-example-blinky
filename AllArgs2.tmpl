
{%- for Ts in arg_combinations %}
template<{{join(Ts, "typename {0!u}", ", ")}}>
struct AllArgs<{{", ".join(format("{0!u}", Ts))}}> {
    typedef AllArgs<{{", ".join(format("{0!u}", Ts))}}> Self;
    {{" ".join(format("{0!u} {0!l};", Ts))}}                           

    template<typename T0, typename T1>
    AllArgs({{", ".join(["T0 b0=B0()", "T1 b1=B1()"] + format("{0!u} {0!l}={0!u}()", Ts[2:]))}}): {{", ".join(format("{0!l}({0!l})", Ts))}} {}

    template <typename T, typename _>
    struct Operations {
        static void copy(void *_dest, void *_src)
        {
            new (_dest) Self(*(Self*)_src);
        }

        static void call(void *data) {
            Self *s = static_cast<Self*>(data);
            s->b0({{", ".join(format("s->{0!l}", Ts[1:]))}});
            s->~Self();
        }
    };

    template <typename T, typename R, typename U>
    struct Operations<T*, R (U::*)({{", ".join(format("{0!u}", Ts[2:]))}})> {
        static void copy(void *_dest, void *_src)
        {
            new (_dest) Self(*(Self*)_src);
        }

        static void call(void *data) {
            Self *s = static_cast<Self*>(data);
            ((s->b0)->*(s->b1))({{", ".join(format("s->{0!l}", Ts[2:]))}});
            s->~Self();
        }
    };

    template <typename T, typename R, typename U>
    struct Operations<T, R (U::*)({{", ".join(format("{0!u}", Ts[2:]))}}) const> {
        static void copy(void *_dest, void *_src)
        {
            new (_dest) Self(*(Self*)_src);
        }

        static void call(void *data) {
            Self *s = static_cast<Self*>(data);
            ((s->b0)->*(s->b1))({{", ".join(format("s->{0!l}", Ts[2:]))}});
            s->~Self();
        }
    };

    template <typename T, typename R, typename U>
    struct Operations<T, R (U::*)({{", ".join(format("{0!u}", Ts[2:]))}}) volatile> {
        static void copy(void *_dest, void *_src)
        {
            new (_dest) Self(*(Self*)_src);
        }

        static void call(void *data) {
            Self *s = static_cast<Self*>(data);
            ((s->b0)->*(s->b1))({{", ".join(format("s->{0!l}", Ts[2:]))}});
            s->~Self();
        }
    };

    template <typename T, typename R, typename U>
    struct Operations<T, R (U::*)({{", ".join(format("{0!u}", Ts[2:]))}}) const volatile> {
        static void copy(void *_dest, void *_src)
        {
            new (_dest) Self(*(Self*)_src);
        }

        static void call(void *data) {
            Self *s = static_cast<Self*>(data);
            ((s->b0)->*(s->b1))({{", ".join(format("s->{0!l}", Ts[2:]))}});
            s->~Self();
        }
    };

    typedef Operations<B0, B1> ops;
};
{% endfor %}